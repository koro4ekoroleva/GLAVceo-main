from flask import Flask, request, jsonify, render_template
import threading
from telebot import TeleBot
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
TELEGRAM_TOKEN = "7654476996:AAHF9AzcSWclTnGOavHy-tdqqkrmRf4bihY"
CHAT_ID = '922226528'  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π chat_id
bot = TeleBot(TELEGRAM_TOKEN)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = Flask(__name__)

# –ú–µ–Ω—é –¥–ª—è —Å–∞–π—Ç–∞
menu = [
    {"name": "–ì–ª–∞–≤–Ω–∞—è", "url": "/"},
    {"name": "–í–∏–¥—ã —ç–∫—Å–ø–µ—Ä—Ç–∏–∑", "url": "expertise"},
    {"name": "–ü–æ–º–æ—â—å", "url": "help"},
    {"name": "–ü–∞—Ä—Ç–Ω—ë—Ä—ã", "url": "partners"},
    {"name": "–î–æ–∫—É–º–µ–Ω—Ç—ã", "url": "documents"},
    {"name": "–û –Ω–∞—Å", "url": ""}
]


@app.route('/send-to-telegram', methods=['POST'])
def send_to_telegram():
    try:
        data = request.form
        logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã: {data}")

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = (
            "üìå –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é:\n\n"
            f"üë§ –ò–º—è: {data.get('name', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {data.get('comment', '–Ω–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è')}"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.send_message(CHAT_ID, message)
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram: {message}")

        return jsonify({"status": "success"})

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {str(e)}")
        return jsonify({
            "status": "error",
            "message": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        }), 500


@app.route("/")
def index():
    return render_template('index.html', menu=menu)


@app.route("/expertise")
def expertise():
    return render_template('expertise.html', title="–í–∏–¥—ã —ç–∫—Å–ø–µ—Ä—Ç–∏–∑", menu=menu)


@app.route("/help")
def help():
    return render_template('help.html', title="–ü–æ–º–æ—â—å", menu=menu)


@app.route("/partners")
def partners():
    return render_template('partners.html', title="–ü–∞—Ä—Ç–Ω—ë—Ä—ã", menu=menu)


@app.route("/documents")
def documents():
    return render_template('documents.html', title="–î–æ–∫—É–º–µ–Ω—Ç—ã", menu=menu)


def run_bot():
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ")
    try:
        bot.infinity_polling()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}")


if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç
    try:
        logger.info(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º –±–æ—Ç–∞... ID: {bot.get_me().id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É: {e}")
        exit(1)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    bot_thread = threading.Thread(target=run_bot)
    bot_thread.daemon = True
    bot_thread.start()

    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app.run(host='0.0.0.0', port=5000, debug=True, use_reloader=False)